AWSTemplateFormatVersion: '2010-09-09'
Description: 'Trading Lambda Infrastructure - Lightweight and Cost-Optimized'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'prod']
    Description: 'Environment name'
  
  AlpacaSecretName:
    Type: String
    Default: 'trading/alpaca/credentials'
    Description: 'AWS Secrets Manager secret name for Alpaca credentials'
  
  FinnhubSecretName:
    Type: String
    Default: 'trading/finnhub/credentials'
    Description: 'AWS Secrets Manager secret name for Finnhub credentials'
  
  VpcId:
    Type: String
    Default: ''
    Description: 'VPC ID for Lambda functions (optional - leave empty for default VPC)'
  
  SubnetIds:
    Type: CommaDelimitedList
    Default: ''
    Description: 'Subnet IDs for Lambda functions (optional - leave empty for default VPC)'
  
  S3BucketName:
    Type: String
    Default: 'trading-lambdas-dev-1759098981'
    Description: 'S3 bucket name containing Lambda deployment packages'

Conditions:
  HasVpcConfig: !Not [!Equals [!Ref VpcId, '']]

Resources:
  # VPC Configuration for enhanced security
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Trading Lambda functions
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-trading-lambda-sg'

  # IAM Role for all Lambdas
  TradingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-trading-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TradingLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Secrets Manager access
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AlpacaSecretName}*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${FinnhubSecretName}*'
              
              # DynamoDB access - Dynamic table creation and cleanup
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteTable
                  - dynamodb:TagResource
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/earnings-table'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/filtered-tickers-table'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/earnings-table/index/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/filtered-tickers-table/index/*'
              
              # Lambda invocation
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-*'
              
              # SQS access for Dead Letter Queue
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt DeadLetterQueue.Arn
              
              # EventBridge access for rule management
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:PutTargets
                  - events:DeleteRule
                  - events:RemoveTargets
                  - events:ListTargetsByRule
                  - events:EnableRule
                  - events:DisableRule
                  - events:DescribeRule
                  - events:ListRules
                Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/dev-*'

  # DynamoDB Tables - Created dynamically by MarketSchedulerLambda
  # Tables are created only on market-open days, 5 minutes before ScanEarningsLambda runs

  # Lambda Functions
  MarketSchedulerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-market-scheduler'
      Runtime: java21
      Handler: com.trading.MarketSchedulerLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: market-scheduler-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          SCAN_EARNINGS_LAMBDA: !Ref ScanEarningsLambda
          STOCK_FILTER_LAMBDA: !Ref StockFilterLambda
          INITIATE_TRADES_LAMBDA: !Ref InitiateTradesLambda
          INITIATE_EXIT_TRADES_LAMBDA: !Ref InitiateExitTradesLambda
          FINNHUB_SECRET_NAME: !Ref FinnhubSecretName
          ENVIRONMENT: !Ref Environment
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          EARNINGS_TABLE: 'earnings-table'
          FILTERED_TABLE: 'filtered-tickers-table'
      VpcConfig:
        !If
          - HasVpcConfig
          - SecurityGroupIds:
              - !Ref LambdaSecurityGroup
            SubnetIds: !Ref SubnetIds
          - !Ref AWS::NoValue
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn

  ScanEarningsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-scan-earnings'
      Runtime: java21
      Handler: com.trading.ScanEarningsLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: scan-earnings-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          EARNINGS_TABLE: 'earnings-table'
          FINNHUB_SECRET_NAME: !Ref FinnhubSecretName
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          FINNHUB_API_URL: 'https://finnhub.io/api/v1/calendar/earnings'
          ENVIRONMENT: !Ref Environment

  StockFilterLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-stock-filter'
      Runtime: java21
      Handler: com.trading.lambda.StockFilterLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: stock-filter-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          EARNINGS_TABLE: 'earnings-table'
          FILTERED_TABLE: 'filtered-tickers-table'
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          FINNHUB_SECRET_NAME: !Ref FinnhubSecretName
          ENVIRONMENT: !Ref Environment

  InitiateTradesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-initiate-trades'
      Runtime: java21
      Handler: com.trading.lambda.InitiateTradesLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: initiate-trades-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          PAPER_TRADING: 'true'
          FILTERED_TABLE: 'filtered-tickers-table'

  InitiateExitTradesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-initiate-exit-trades'
      Runtime: java21
      Handler: com.trading.lambda.InitiateExitTradesLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: initiate-exit-trades-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          PAPER_TRADING: 'true'

  # Market Scheduler Rule - Runs at 6:00 AM EST to configure daily scheduling
  MarketSchedulerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-market-scheduler-rule'
      Description: 'Triggers MarketSchedulerLambda at 6 AM EST on weekdays to configure daily scheduling'
      ScheduleExpression: 'cron(0 6 ? * MON-FRI *)'  # 6:00 AM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt MarketSchedulerLambda.Arn
          Id: 'MarketSchedulerTarget'
          Input: '{"source": "daily-schedule"}'

  # Table Creation Rules - 10 minutes before ScanEarningsLambda
  # Normal Day Table Creation (3:20 PM EST)
  TableCreationNormalRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-table-creation-normal-rule'
      Description: 'Creates DynamoDB tables 10 minutes before normal day ScanEarningsLambda runs'
      ScheduleExpression: 'cron(20 15 ? * MON-FRI *)'  # 3:20 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt MarketSchedulerLambda.Arn
          Id: 'TableCreationNormalTarget'
          Input: '{"source": "create-tables", "dayType": "normal"}'

  # Early Closure Day Table Creation (12:20 PM EST)
  TableCreationEarlyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-table-creation-early-rule'
      Description: 'Creates DynamoDB tables 10 minutes before early closure ScanEarningsLambda runs'
      ScheduleExpression: 'cron(20 12 ? * MON-FRI *)'  # 12:20 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt MarketSchedulerLambda.Arn
          Id: 'TableCreationEarlyTarget'
          Input: '{"source": "create-tables", "dayType": "early"}'

  # Normal Trading Day Rules
  NormalScanEarningsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-scan-earnings-rule'
      Description: 'Triggers ScanEarningsLambda at 3:30 PM EST on normal trading days'
      ScheduleExpression: 'cron(30 15 ? * MON-FRI *)'  # 3:30 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScanEarningsLambda.Arn
          Id: 'NormalScanEarningsTarget'
          Input: '{"source": "scan-earnings-schedule"}'

  NormalStockFilterRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-stock-filter-rule'
      Description: 'Triggers StockFilterLambda at 3:35 PM EST on normal trading days'
      ScheduleExpression: 'cron(35 15 ? * MON-FRI *)'  # 3:35 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt StockFilterLambda.Arn
          Id: 'NormalStockFilterTarget'
          InputTransformer:
            InputTemplate: '{"source": "stock-filter-schedule"}'

  NormalInitiateTradesRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-initiate-trades-rule'
      Description: 'Triggers InitiateTradesLambda at 3:45 PM EST on normal trading days'
      ScheduleExpression: 'cron(45 15 ? * MON-FRI *)'  # 3:45 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt InitiateTradesLambda.Arn
          Id: 'NormalInitiateTradesTarget'
          InputTransformer:
            InputTemplate: '{"source": "initiate-trades-schedule"}'

  NormalInitiateExitTradesRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-initiate-exit-trades-rule'
      Description: 'Triggers InitiateExitTradesLambda at 9:45 AM EST on normal trading days'
      ScheduleExpression: 'cron(45 9 ? * MON-FRI *)'  # 9:45 AM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt InitiateExitTradesLambda.Arn
          Id: 'NormalInitiateExitTradesTarget'
          Input: '{"source": "initiate-exit-trades-schedule"}'

  # New Single-Purpose Lambda Functions
  UpdateExitOrdersAtMarketLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-update-exit-orders-at-market'
      Runtime: java21
      Handler: com.trading.lambda.UpdateExitOrdersAtMarketLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: update-exit-orders-at-market-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          ALPACA_API_URL: 'https://paper-api.alpaca.markets/v2'
          ENVIRONMENT: !Ref Environment

  ConvertExitOrdersToMarketLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-convert-exit-orders-to-market'
      Runtime: java21
      Handler: com.trading.lambda.ConvertExitOrdersToMarketLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: convert-exit-orders-to-market-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          ALPACA_API_URL: 'https://paper-api.alpaca.markets/v2'
          ENVIRONMENT: !Ref Environment

  UpdateEntryOrdersAtMarketLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-update-entry-orders-at-market'
      Runtime: java21
      Handler: com.trading.lambda.UpdateEntryOrdersAtMarketLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: update-entry-orders-at-market-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          ALPACA_API_URL: 'https://paper-api.alpaca.markets/v2'
          ENVIRONMENT: !Ref Environment

  CancelEntryOrdersLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-cancel-entry-orders'
      Runtime: java21
      Handler: com.trading.lambda.CancelEntryOrdersLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: cancel-entry-orders-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          ALPACA_API_URL: 'https://paper-api.alpaca.markets/v2'
          ENVIRONMENT: !Ref Environment

  UpdateExitOrdersAtDiscountLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-update-exit-orders-at-discount'
      Runtime: java21
      Handler: com.trading.lambda.UpdateExitOrdersAtDiscountLambda::handleRequest
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: update-exit-orders-at-discount-lambda-1.0.0.jar
      Role: !GetAtt TradingLambdaRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ALPACA_SECRET_NAME: !Ref AlpacaSecretName
          ALPACA_API_URL: 'https://paper-api.alpaca.markets/v2'
          ENVIRONMENT: !Ref Environment






  # Morning Window: UpdateExitOrdersLambda (first 10 times: 9:46-9:55 AM EST)
  NormalUpdateExitOrdersRule1:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-update-exit-orders-rule-1'
      Description: 'Triggers UpdateExitOrdersAtMarketLambda every minute during 9:46-9:55 AM EST on normal trading days'
      ScheduleExpression: 'cron(46-55 9 ? * MON-FRI *)'  # 9:46-9:55 AM EST every minute
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateExitOrdersAtMarketLambda.Arn
          Id: 'NormalUpdateExitOrdersTarget1'
          Input: '{"source": "update-exit-orders-schedule", "window": "morning", "dayType": "normal"}'

  # Morning Window: UpdateExitOrdersSimpleLambda (11th and 12th times: 9:56-9:57 AM EST)
  NormalUpdateExitOrdersSimpleRule1:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-update-exit-orders-simple-rule-1'
      Description: 'Triggers UpdateExitOrdersAtDiscountLambda at 9:56-9:57 AM EST on normal trading days'
      ScheduleExpression: 'cron(56-57 9 ? * MON-FRI *)'  # 9:56-9:57 AM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateExitOrdersAtDiscountLambda.Arn
          Id: 'NormalUpdateExitOrdersSimpleTarget1'
          Input: '{"source": "update-exit-orders-simple-schedule", "window": "morning", "dayType": "normal"}'

  # Morning Window: ConvertExitOrdersLambda (last 3 times: 9:58-9:59 AM EST + 10:00 AM)
  NormalConvertExitOrdersRule1:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-convert-exit-orders-rule-1'
      Description: 'Triggers ConvertExitOrdersToMarketLambda every minute during 9:58-9:59 AM EST on normal trading days'
      ScheduleExpression: 'cron(58-59 9 ? * MON-FRI *)'  # 9:58-9:59 AM EST every minute
      State: ENABLED
      Targets:
        - Arn: !GetAtt ConvertExitOrdersToMarketLambda.Arn
          Id: 'NormalConvertExitOrdersTarget1'
          Input: '{"source": "convert-exit-orders-schedule", "window": "morning", "dayType": "normal"}'

  NormalConvertExitOrdersRule1b:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-convert-exit-orders-rule-1b'
      Description: 'Triggers ConvertExitOrdersToMarketLambda at 10:00 AM EST on normal trading days'
      ScheduleExpression: 'cron(0 10 ? * MON-FRI *)'  # 10:00 AM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt ConvertExitOrdersToMarketLambda.Arn
          Id: 'NormalConvertExitOrdersTarget1b'
          Input: '{"source": "convert-exit-orders-schedule", "window": "morning", "dayType": "normal"}'

  # Afternoon Window: UpdateEntryOrdersLambda (first 10 times: 3:46-3:55 PM EST)
  NormalUpdateEntryOrdersRule2:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-update-entry-orders-rule-2'
      Description: 'Triggers UpdateEntryOrdersAtMarketLambda every minute during 3:46-3:55 PM EST on normal trading days'
      ScheduleExpression: 'cron(46-55 15 ? * MON-FRI *)'  # 3:46-3:55 PM EST every minute
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateEntryOrdersAtMarketLambda.Arn
          Id: 'NormalUpdateEntryOrdersTarget2'
          Input: '{"source": "update-entry-orders-schedule", "window": "afternoon", "dayType": "normal"}'

  # Afternoon Window: CancelEntryOrdersLambda (last 6 times: 3:56-4:00 PM EST)
  NormalCancelEntryOrdersRule2:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-cancel-entry-orders-rule-2'
      Description: 'Triggers CancelEntryOrdersLambda every minute during 3:56-4:00 PM EST on normal trading days'
      ScheduleExpression: 'cron(56-59 15 ? * MON-FRI *)'  # 3:56-3:59 PM EST every minute
      State: ENABLED
      Targets:
        - Arn: !GetAtt CancelEntryOrdersLambda.Arn
          Id: 'NormalCancelEntryOrdersTarget2'
          Input: '{"source": "cancel-entry-orders-schedule", "window": "afternoon", "dayType": "normal"}'

  NormalCancelEntryOrdersRule2b:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-normal-cancel-entry-orders-rule-2b'
      Description: 'Triggers CancelEntryOrdersLambda at 4:00 PM EST on normal trading days'
      ScheduleExpression: 'cron(0 16 ? * MON-FRI *)'  # 4:00 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt CancelEntryOrdersLambda.Arn
          Id: 'NormalCancelEntryOrdersTarget2b'
          Input: '{"source": "cancel-entry-orders-schedule", "window": "afternoon", "dayType": "normal"}'


  # Early Closure Day Rules
  EarlyScanEarningsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-scan-earnings-rule'
      Description: 'Triggers ScanEarningsLambda at 12:30 PM EST on early closure days'
      ScheduleExpression: 'cron(30 12 ? * MON-FRI *)'  # 12:30 PM EST
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt ScanEarningsLambda.Arn
          Id: 'EarlyScanEarningsTarget'
          Input: '{"source": "scan-earnings-schedule"}'

  EarlyStockFilterRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-stock-filter-rule'
      Description: 'Triggers StockFilterLambda at 12:35 PM EST on early closure days'
      ScheduleExpression: 'cron(35 12 ? * MON-FRI *)'  # 12:35 PM EST
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt StockFilterLambda.Arn
          Id: 'EarlyStockFilterTarget'
          InputTransformer:
            InputTemplate: '{"source": "stock-filter-schedule"}'

  EarlyInitiateTradesRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-initiate-trades-rule'
      Description: 'Triggers InitiateTradesLambda at 12:45 PM EST on early closure days'
      ScheduleExpression: 'cron(45 12 ? * MON-FRI *)'  # 12:45 PM EST
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt InitiateTradesLambda.Arn
          Id: 'EarlyInitiateTradesTarget'
          InputTransformer:
            InputTemplate: '{"source": "initiate-trades-schedule"}'

  EarlyInitiateExitTradesRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-initiate-exit-trades-rule'
      Description: 'Triggers InitiateExitTradesLambda at 9:45 AM EST on early closure days'
      ScheduleExpression: 'cron(45 9 ? * MON-FRI *)'  # 9:45 AM EST
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt InitiateExitTradesLambda.Arn
          Id: 'EarlyInitiateExitTradesTarget'
          Input: '{"source": "initiate-exit-trades-schedule"}'

  # Early Closure Day Rules - Using Single-Purpose Lambdas
  # Early Closure Day Morning Window: UpdateExitOrdersLambda (first 10 times: 9:46-9:55 AM EST)
  EarlyUpdateExitOrdersRule1:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-update-exit-orders-rule-1'
      Description: 'Triggers UpdateExitOrdersAtMarketLambda every minute during 9:46-9:55 AM EST on early closure days'
      ScheduleExpression: 'cron(46-55 9 ? * MON-FRI *)'  # 9:46-9:55 AM EST every minute
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt UpdateExitOrdersAtMarketLambda.Arn
          Id: 'EarlyUpdateExitOrdersTarget1'
          Input: '{"source": "update-exit-orders-schedule", "window": "morning", "dayType": "early"}'

  # Early Closure Day Morning Window: UpdateExitOrdersSimpleLambda (11th and 12th times: 9:56-9:57 AM EST)
  EarlyUpdateExitOrdersSimpleRule1:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-update-exit-orders-simple-rule-1'
      Description: 'Triggers UpdateExitOrdersAtDiscountLambda at 9:56-9:57 AM EST on early closure days'
      ScheduleExpression: 'cron(56-57 9 ? * MON-FRI *)'  # 9:56-9:57 AM EST
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt UpdateExitOrdersAtDiscountLambda.Arn
          Id: 'EarlyUpdateExitOrdersSimpleTarget1'
          Input: '{"source": "update-exit-orders-simple-schedule", "window": "morning", "dayType": "early"}'

  # Early Closure Day Morning Window: ConvertExitOrdersLambda (last 3 times: 9:58-9:59 AM EST + 10:00 AM)
  EarlyConvertExitOrdersRule1:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-convert-exit-orders-rule-1'
      Description: 'Triggers ConvertExitOrdersToMarketLambda every minute during 9:58-9:59 AM EST on early closure days'
      ScheduleExpression: 'cron(58-59 9 ? * MON-FRI *)'  # 9:58-9:59 AM EST every minute
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt ConvertExitOrdersToMarketLambda.Arn
          Id: 'EarlyConvertExitOrdersTarget1'
          Input: '{"source": "convert-exit-orders-schedule", "window": "morning", "dayType": "early"}'

  EarlyConvertExitOrdersRule1b:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-convert-exit-orders-rule-1b'
      Description: 'Triggers ConvertExitOrdersToMarketLambda at 10:00 AM EST on early closure days'
      ScheduleExpression: 'cron(0 10 ? * MON-FRI *)'  # 10:00 AM EST
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt ConvertExitOrdersToMarketLambda.Arn
          Id: 'EarlyConvertExitOrdersTarget1b'
          Input: '{"source": "convert-exit-orders-schedule", "window": "morning", "dayType": "early"}'

  # Early Closure Day Afternoon Window: UpdateEntryOrdersLambda (first 10 times: 12:46-12:55 PM EST)
  EarlyUpdateEntryOrdersRule2:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-update-entry-orders-rule-2'
      Description: 'Triggers UpdateEntryOrdersAtMarketLambda every minute during 12:46-12:55 PM EST on early closure days'
      ScheduleExpression: 'cron(46-55 12 ? * MON-FRI *)'  # 12:46-12:55 PM EST every minute
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt UpdateEntryOrdersAtMarketLambda.Arn
          Id: 'EarlyUpdateEntryOrdersTarget2'
          Input: '{"source": "update-entry-orders-schedule", "window": "afternoon", "dayType": "early"}'

  # Early Closure Day Afternoon Window: CancelEntryOrdersLambda (last 6 times: 12:56-1:00 PM EST)
  EarlyCancelEntryOrdersRule2:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-cancel-entry-orders-rule-2'
      Description: 'Triggers CancelEntryOrdersLambda every minute during 12:56-1:00 PM EST on early closure days'
      ScheduleExpression: 'cron(56-59 12 ? * MON-FRI *)'  # 12:56-12:59 PM EST every minute
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt CancelEntryOrdersLambda.Arn
          Id: 'EarlyCancelEntryOrdersTarget2'
          Input: '{"source": "cancel-entry-orders-schedule", "window": "afternoon", "dayType": "early"}'

  EarlyCancelEntryOrdersRule2b:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-early-cancel-entry-orders-rule-2b'
      Description: 'Triggers CancelEntryOrdersLambda at 1:00 PM EST on early closure days'
      ScheduleExpression: 'cron(0 13 ? * MON-FRI *)'  # 1:00 PM EST
      State: DISABLED  # Will be enabled dynamically
      Targets:
        - Arn: !GetAtt CancelEntryOrdersLambda.Arn
          Id: 'EarlyCancelEntryOrdersTarget2b'
          Input: '{"source": "cancel-entry-orders-schedule", "window": "afternoon", "dayType": "early"}'

  # Table Cleanup Rules - 30 minutes after ScanEarningsLambda
  # Early Closure Cleanup (1:00 PM EST)
  TableCleanupEarlyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-table-cleanup-early-rule'
      Description: 'Cleans up DynamoDB tables 30 minutes after early closure ScanEarningsLambda'
      ScheduleExpression: 'cron(0 13 ? * MON-FRI *)'  # 1:00 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt MarketSchedulerLambda.Arn
          Id: 'TableCleanupEarlyTarget'
          Input: '{"source": "cleanup-tables-early"}'

  # Normal Day Cleanup (4:00 PM EST)
  TableCleanupNormalRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${Environment}-table-cleanup-normal-rule'
      Description: 'Cleans up DynamoDB tables 30 minutes after normal day ScanEarningsLambda'
      ScheduleExpression: 'cron(0 16 ? * MON-FRI *)'  # 4:00 PM EST
      State: ENABLED
      Targets:
        - Arn: !GetAtt MarketSchedulerLambda.Arn
          Id: 'TableCleanupNormalTarget'
          Input: '{"source": "cleanup-tables-normal"}'

  # Lambda Permissions for EventBridge
  MarketSchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MarketSchedulerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MarketSchedulerRule.Arn

  TableCreationNormalPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MarketSchedulerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TableCreationNormalRule.Arn

  TableCreationEarlyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MarketSchedulerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TableCreationEarlyRule.Arn

  # Normal Trading Day Lambda Permissions
  NormalScanEarningsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScanEarningsLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalScanEarningsRule.Arn

  NormalStockFilterPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StockFilterLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalStockFilterRule.Arn

  NormalInitiateTradesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InitiateTradesLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalInitiateTradesRule.Arn

  NormalInitiateExitTradesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InitiateExitTradesLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalInitiateExitTradesRule.Arn

  # New Single-Purpose Lambda Permissions
  NormalUpdateExitOrdersPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateExitOrdersAtMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalUpdateExitOrdersRule1.Arn

  NormalConvertExitOrdersPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConvertExitOrdersToMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalConvertExitOrdersRule1.Arn

  NormalConvertExitOrdersPermission1b:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConvertExitOrdersToMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalConvertExitOrdersRule1b.Arn

  NormalUpdateEntryOrdersPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateEntryOrdersAtMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalUpdateEntryOrdersRule2.Arn

  NormalCancelEntryOrdersPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CancelEntryOrdersLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalCancelEntryOrdersRule2.Arn

  NormalUpdateExitOrdersSimplePermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateExitOrdersAtDiscountLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalUpdateExitOrdersSimpleRule1.Arn

  # Early Closure Day Lambda Permissions
  EarlyScanEarningsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScanEarningsLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyScanEarningsRule.Arn

  EarlyStockFilterPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StockFilterLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyStockFilterRule.Arn

  EarlyInitiateTradesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InitiateTradesLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyInitiateTradesRule.Arn

  EarlyInitiateExitTradesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InitiateExitTradesLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyInitiateExitTradesRule.Arn

  # Early Closure Day Single-Purpose Lambda Permissions
  EarlyUpdateExitOrdersPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateExitOrdersAtMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyUpdateExitOrdersRule1.Arn

  EarlyConvertExitOrdersPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConvertExitOrdersToMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyConvertExitOrdersRule1.Arn

  EarlyConvertExitOrdersPermission1b:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConvertExitOrdersToMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyConvertExitOrdersRule1b.Arn

  EarlyUpdateEntryOrdersPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateEntryOrdersAtMarketLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyUpdateEntryOrdersRule2.Arn

  EarlyCancelEntryOrdersPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CancelEntryOrdersLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyCancelEntryOrdersRule2.Arn

  EarlyUpdateExitOrdersSimplePermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateExitOrdersAtDiscountLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyUpdateExitOrdersSimpleRule1.Arn

  TableCleanupEarlyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MarketSchedulerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TableCleanupEarlyRule.Arn

  NormalCancelEntryOrdersPermission2b:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CancelEntryOrdersLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NormalCancelEntryOrdersRule2b.Arn

  EarlyCancelEntryOrdersPermission2b:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CancelEntryOrdersLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EarlyCancelEntryOrdersRule2b.Arn

  TableCleanupNormalPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MarketSchedulerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TableCleanupNormalRule.Arn

  # SNS Topic for Alerts
  TradingAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-trading-alerts'
      DisplayName: 'Trading System Alerts'

  # SNS Subscription
  TradingAlertsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref TradingAlertsTopic
      Endpoint: mgreim3373@gmail.com

  # CloudWatch Alarms for monitoring
  MarketSchedulerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-market-scheduler-errors'
      AlarmDescription: 'Market Scheduler Lambda errors'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MarketSchedulerLambda
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref TradingAlertsTopic

  MarketSchedulerDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-market-scheduler-duration'
      AlarmDescription: 'Market Scheduler Lambda duration too high'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 45000  # 45 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref MarketSchedulerLambda
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref TradingAlertsTopic

  # Dead Letter Queue for failed invocations
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-trading-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: DeadLetterQueue

Outputs:
  MarketSchedulerLambdaArn:
    Description: 'Market Scheduler Lambda ARN'
    Value: !GetAtt MarketSchedulerLambda.Arn
    Export:
      Name: !Sub '${Environment}-MarketSchedulerLambdaArn'
  
  EarningsDataTableName:
    Description: 'Earnings Data DynamoDB Table Name (created dynamically)'
    Value: 'earnings-table'
    Export:
      Name: !Sub '${Environment}-EarningsDataTableName'
  
  FilteredStocksTableName:
    Description: 'Filtered Stocks DynamoDB Table Name (created dynamically)'
    Value: 'filtered-tickers-table'
    Export:
      Name: !Sub '${Environment}-FilteredStocksTableName'
